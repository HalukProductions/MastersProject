theory tlecrypto
begin

builtins: diffie-hellman, symmetric-encryption

/* Channel rules */

rule ChanOut_A:
    [ !Out_A($A,$B,x) ]
    --[ ChanOut_A($A,$B,x) ]->
    [ !Auth($A,x), Out(<$A,$B,x>) ]

rule ChanIn_A:
    [ !Auth($A,x), In($B) ]
    --[ ChanIn_A($A,$B,x) ]->
    [ In_A($A,$B,x) ]

/* Protocol */

rule agent_register:
    [Fr(~sk1), Fr(~sk2), Fr(~sk3)]
    --[OnlyOnce(), Register(~sk1, ~sk2, ~sk3)]->
    [!Agent($Agent1, 'agent1', ~sk1, 'g'^~sk1), !Out_A($Agent1, $C, <'pk', 'agent1', 'g'^~sk1>), 
    !Agent($Agent2, 'agent2', ~sk2, 'g'^~sk2), !Out_A($Agent2, $C, <'pk', 'agent2', 'g'^~sk2>),
    !Agent($Agent3, 'agent3', ~sk3, 'g'^~sk3), !Out_A($Agent3, $C, <'pk', 'agent3', 'g'^~sk3>)]

rule client_gen_r:
    [Fr(~r)]
    --[OnlyOnce(), GenR(~r)]->
    [!Client_r(~r)]

rule client_get_share:
    [!Client_r(~r), In_A(A, $C, <'pk', agent_num, pk1>)]
    -->
    [!Share(A, agent_num, pk1^~r)]

rule get_poly:
    [!Share(Agent1, 'agent1', share1), !Share(Agent2, 'agent2', share2)]
    --[_restrict(not Agent1=Agent2), _restrict(not share1=share2)]->
    [!Poly()]

rule get_k:
    [!Poly()]
    --[GetK($k)]->
    [!Key($k)]

rule client_share_k:
    [!Client_r(~r)]
    --[PublishG1r('g'^~r)]->
    [!Out_A($C, $Agent, <'g1r', 'g'^~r>)]

rule get_agent3_point:
    [!Poly()]
    -->
    [!Point3($n)]

rule client_share_alphas:
    [!Point3($n), !Share(A, 'agent3', share3)]
    -->
    [!Out_A($C, $Agent, <'alpha3', senc($n, share3)>)]

rule agent_get_share:
    [!Agent(A, agent_num, ~sk, pk), In_A($C, A, <'g1r', g1r>)]
    -->
    [!Share(A, agent_num, g1r^~sk)]

rule agent_submit_share:
    [!Share(A, agent_num, share)]
    --[SubmitShare(A, agent_num, share)]->
    [!Out_A(A, $C, <'share', agent_num, share>)]

rule recover_poly_with_13:
    [!Share(Agent1, 'agent1', share1), !Point3(n)]
    -->
    [!Poly()]

rule recover_poly_with_23:
    [!Share(Agent2, 'agent2', share2), !Point3(n)]
    -->
    [!Poly()]


restriction OnlyOnce:
    "All #i #j. OnlyOnce()@#i & OnlyOnce()@#j ==> #i = #j"

lemma k_secrecy_restricted:
    "All g1r A1 num1 s1 A2 num2 s2 A3 num3 s3 k #p #s1 #s2 #s3 #i.
        PublishG1r(g1r)@p &
        SubmitShare(A1, num1, s1)@s1 &
        SubmitShare(A2, num2, s2)@s2 &
        SubmitShare(A3, num3, s3)@s3 &
        GetK(k)@i &
        (not A1=A2) & (not A2=A3) & (not A1=A3) &
        #p < #s1 & #p < #s2 & #p < #s3 & #p < #i
    ==>
    not(Ex #j . K(s1)@j & #p<#j & #s1<#j & #s2<#j)"

end