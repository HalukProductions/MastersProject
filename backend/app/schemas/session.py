"""
Pydantic schemas for Vote Session data, particularly for MongoDB caching.
"""
from pydantic import BaseModel, Field
from typing import List, Optional, Any

class SessionCacheModel(BaseModel):
    """Pydantic model representing the structure of a session document in MongoDB cache."""
    session_id: int | str = Field(..., description="Session ID, used as MongoDB _id field")
    vote_session_address: Optional[str] = Field(None, description="Address of the VoteSession contract")
    participant_registry_address: Optional[str] = Field(None, description="Address of the ParticipantRegistry contract")
    title: Optional[str] = Field(None, description="Session title")
    description: Optional[str] = Field(None, description="Session description")
    start_date_ts: Optional[int] = Field(None, description="Start date/time as Unix timestamp")
    end_date_ts: Optional[int] = Field(None, description="End date/time as Unix timestamp")
    shares_collection_end_date_ts: Optional[int] = Field(None, description="Shares collection end date/time as Unix timestamp")
    options: Optional[List[str]] = Field(None, description="List of voting options")
    metadata_contract: Optional[str] = Field(None, description="Metadata string from the contract")
    required_deposit_wei: Optional[str] = Field(None, description="Required deposit in Wei (as string)")
    min_share_threshold: Optional[int] = Field(None, description="Minimum share threshold set at initialization")
    actual_min_share_threshold: Optional[int] = Field(None, description="Actual minimum share threshold (potentially adjusted)")
    current_status_str: Optional[str] = Field(None, description="Current session status string (e.g., 'VotingOpen')")
    decryption_threshold: Optional[int] = Field(None, description="Decryption threshold (T) from setDecryptionParameters")
    alphas: Optional[List[str]] = Field(None, description="List of Alpha points (hex strings) from setDecryptionParameters")
    last_synced_ts: Optional[int] = Field(None, description="Unix timestamp when the cache was last updated")

    class Config:
        # Example usage note: When inserting into MongoDB, use model_dump(by_alias=True)
        # if you set session_id as alias for _id
        # For now, we assume session_id is a regular field and _id is generated by MongoDB
        # or session_id is manually used as _id. Let's use session_id as the primary key field.
        # We might need to adjust MongoDB insertion logic to use session_id as _id.
        # Alternatively, define `id_` : Optional[Any] = Field(None, alias="_id")
        pass

# --- Additional schemas for API responses might be needed ---

class SessionApiResponseItem(BaseModel):
     """Schema for a single session item in API list responses."""
     id: int | str = Field(..., description="Session ID")
     title: Optional[str] = Field(None)
     status: Optional[str] = Field(None, description="Current session status string")
     startDate: Optional[str] = Field(None, description="ISO 8601 formatted start date")
     endDate: Optional[str] = Field(None, description="ISO 8601 formatted end date")
     voteSessionAddress: Optional[str] = Field(None, alias="vote_session_address")
     registryAddress: Optional[str] = Field(None, alias="participant_registry_address")

class SessionDetailApiResponse(BaseModel):
     """Schema for the detailed session API response."""
     id: int | str = Field(..., description="Session ID")
     title: Optional[str] = Field(None)
     description: Optional[str] = Field(None)
     startDate: Optional[str] = Field(None, description="ISO 8601 formatted start date")
     endDate: Optional[str] = Field(None, description="ISO 8601 formatted end date")
     sharesEndDate: Optional[str] = Field(None, description="ISO 8601 formatted shares collection end date")
     status: Optional[str] = Field(None, description="Current session status string")
     options: Optional[List[str]] = Field(None)
     metadata: Optional[str] = Field(None, alias="metadata_contract")
     requiredDeposit: Optional[str] = Field(None, description="Required deposit in ETH (as string)", alias="required_deposit_eth") # Note alias and unit change
     minShareThreshold: Optional[int] = Field(None, alias="min_share_threshold")
     voteSessionAddress: Optional[str] = Field(None, alias="vote_session_address")
     registryAddress: Optional[str] = Field(None, alias="participant_registry_address")
     # Add other relevant fields fetched by _get_enriched_session_data if needed for API
     participant_count: Optional[int] = Field(None)
     secret_holder_count: Optional[int] = Field(None)
     reward_pool: Optional[str] = Field(None, description="Total reward pool in ETH (as string)")
     required_keys: Optional[int] = Field(None, alias="actual_min_share_threshold") # Assuming required keys maps to actual threshold
     released_keys: Optional[int] = Field(None, description="Number of holders who submitted shares")
     # Frontend metadata (displayHint, sliderConfig) might be merged here or served separately
     displayHint: Optional[str] = Field(None)
     sliderConfig: Optional[dict] = Field(None)

class SessionStatusApiResponse(BaseModel):
    """Schema for the session status API response."""
    status: str = Field(..., description="Current session status string")
    startDateTs: Optional[int] = Field(None, description="Start date/time as Unix timestamp")
    endDateTs: Optional[int] = Field(None, description="End date/time as Unix timestamp")
    sharesEndDateTs: Optional[int] = Field(None, description="Shares collection end date/time as Unix timestamp")

# We might need schemas for database interaction separate from API responses,
# especially if transformations (like Wei to Eth, timestamp to ISO) are needed.
# The SessionCacheModel serves as the DB schema representation for now. 