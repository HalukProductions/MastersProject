"""
Pydantic schemas for Participant data, particularly for MongoDB caching.
"""
from pydantic import BaseModel, Field
from typing import List, Optional

class ParticipantCacheModel(BaseModel):
    """Pydantic model representing the structure of a participant document in MongoDB cache."""
    # _id will be generated by MongoDB, no need to define explicitly unless needed
    session_id: int | str = Field(..., description="Session ID participant belongs to")
    participant_address: str = Field(..., description="Address of the participant (checksummed)")
    is_holder: bool = Field(..., description="Is the participant registered as a holder?")
    is_registered: bool = Field(..., description="Is the participant registered at all (holder or voter)?") # Added based on ParticipantInfo struct
    deposit_amount_wei: Optional[str] = Field(None, description="Deposit amount in Wei (as string, only for holders)")
    bls_public_key_hex: Optional[str] = Field(None, description="BLS public key in hex (only for holders)")
    has_submitted_shares: bool = Field(..., description="Has the participant submitted shares (if holder)?")
    has_submitted_decryption_value: bool = Field(..., description="Has the participant submitted their decryption value? (from VoteSession)")
    has_voted: bool = Field(..., description="Has the participant cast a vote? (from VoteSession)") # Added based on contract
    last_synced_ts: Optional[int] = Field(None, description="Unix timestamp when the cache was last updated")

    class Config:
        # Consider adding example data if useful
        pass

# --- Schemas for API Responses --- 

class ParticipantListItem(BaseModel):
    """Schema for a single participant in list API responses."""
    address: str = Field(..., alias="participant_address")
    isHolder: bool = Field(..., alias="is_holder")
    hasSubmittedShares: bool = Field(..., alias="has_submitted_shares")
    blsPublicKey: Optional[str] = Field(None, alias="bls_public_key_hex")

class ParticipantDetail(ParticipantListItem):
    """Detailed participant information for API response."""
    isRegistered: bool = Field(..., alias="is_registered")
    depositAmountEth: Optional[str] = Field(None, alias="deposit_amount_eth") # Note transformation
    hasSubmittedDecryptionValue: bool = Field(..., alias="has_submitted_decryption_value")
    hasVoted: bool = Field(..., alias="has_voted")
    # Add claimed status if needed later
    # hasClaimedDeposit: bool = Field(..., alias="has_claimed_deposit")
    # hasClaimedReward: bool = Field(..., alias="has_claimed_reward") 